#ifndef _COLLISION_MANAGER_H_
#define _COLLISION_MANAGER_H_

#include <vector>
using std::vector;

class CBaseObject;

class CCollisionManager 
{
private:
	vector<CBaseObject*> m_vObjectList;
	static CCollisionManager* m_pInstance;

	CCollisionManager() {}
	~CCollisionManager() {}
	CCollisionManager(const CCollisionManager& c) {}
	CCollisionManager& operator=(const CCollisionManager& c) { return *this; }

public:
	//////////////////////////////////////////////////////////////////////////
	// GetInstance():		Gets a static instance of the
	//						collision manager.
	//
	// Return:				CCollisionManager*
	//////////////////////////////////////////////////////////////////////////
	inline static CCollisionManager* GetInstance() { return m_pInstance; }

	//////////////////////////////////////////////////////////////////////////
	// Initialize():		Initializes a static instance of the
	//						collision manager and returns it
	//
	// Return:				CCollisionManager*
	//////////////////////////////////////////////////////////////////////////
	static CCollisionManager* Initialize();

	//////////////////////////////////////////////////////////////////////////
	// Shutdown():			Shuts down and cleans up the collision manager
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void Shutdown();

	//////////////////////////////////////////////////////////////////////////
	// Update():			Handles any and all object updates that are needed
	//						Also handles any input needed.
	//
	// Ins:					float
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void Update(const float fTime);

	//////////////////////////////////////////////////////////////////////////
	// Input():				Listens for and handles input from the user
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void Input();

	//////////////////////////////////////////////////////////////////////////
	// RemoveObject():		Searches for the object passed in from the list
	//						of objects and removes it.
	//
	// Ins:					CBaseObject*
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void RemoveObject(CBaseObject* pObject);

	//////////////////////////////////////////////////////////////////////////
	// RemoveObject():		Removes the object from the list.
	//
	// Ins:					vector<CBaseObject*>::iterator
	//
	// Return:				vector<CBaseObject*>::iterator
	//////////////////////////////////////////////////////////////////////////
	inline vector<CBaseObject*>::iterator RemoveObject(vector<CBaseObject*>::iterator iter) { return m_vObjectList.erase(iter); }

	//////////////////////////////////////////////////////////////////////////
	// AddObject():			Adds the object to the list
	//
	// Ins:					CBaseObject*
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	inline void AddObject(CBaseObject* pObject) { m_vObjectList.push_back(pObject); }

	//////////////////////////////////////////////////////////////////////////
	// Cleanup():			Removes all objects from the object list
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	inline void Cleanup() { m_vObjectList.clear(); }
};
#endif