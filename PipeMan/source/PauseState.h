////////////////////////////////////////////////////////
//	File			:	"CPauseState.h"
//
//	Author			:	Leo Cho (LC)
//
//	Purpose			:	To control the pause menu
////////////////////////////////////////////////////////
#ifndef	_PAUSESTATE_H_
#define	_PAUSESTATE_H_

#include "IGameState.h"

class CPauseState : public IGameState
{
private:
	enum {RESUME, OPTIONS, EXIT, NUM_OPTIONS};

	// Make a true singleton
	CPauseState( char* szMSFName );
	CPauseState(const CPauseState& pState);
	CPauseState& operator=(const CPauseState& pState);
	~CPauseState();

public:
	//////////////////////////////////////////////////////////////////////////
	// GetInstance():		Gets the static instance of the state
	//						returning a pointer to the instance
	//
	// Return:				CPauseState*
	//////////////////////////////////////////////////////////////////////////
	static CPauseState* GetInstance();

	//////////////////////////////////////////////////////////////////////////
	// Enter():				Enters the game state setting up all needed
	//						information based on state
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void Enter();

	//////////////////////////////////////////////////////////////////////////
	// Exit():				Exits the game state shutting down all
	//						initialized objects and resets all data
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void Exit();

	//////////////////////////////////////////////////////////////////////////
	// Input():				Receives input from the user.
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void Input();

	//////////////////////////////////////////////////////////////////////////
	// Update():			Updates the state based on the time passed in
	//						Updates all stored objects based on this time
	//
	// In:					fElapsedTime
	//
	// Return:				bool
	//////////////////////////////////////////////////////////////////////////
	bool Update(float fElapsedTime);

	//////////////////////////////////////////////////////////////////////////
	// Render()				Renders information to the screen using
	//						the rendering engine.
	//
	// Return:				void
	//////////////////////////////////////////////////////////////////////////
	void Render();
};

#endif